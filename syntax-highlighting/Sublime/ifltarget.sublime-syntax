%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: ifltarget
file_extensions:
  - ifltarget
scope: source.ifltarget

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: types
    - include: symbols
    - include: strings
    - include: default

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(comment|basetypes|type|table|view|composite_rule|symbols|operators|constants)\b'
      scope: ifltarget.keyword.block
    - match: '\b(base)\b'
      scope: ifltarget.keyword

  types:
    - match: '\b(date|auto|int|float|bool|string|char|trigger|void)\b'
      scope: iflog.keyword.types

  symbols:
    - match: ';'
      scope: ifltarget.symbol
    - match: '{|}'
      scope: ifltarget.default
    - match: ':'
      scope: iflog.symbol.grey

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: ifltarget.string
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: ifltarget.string
    - match: '<@[^>]*>'
      scope: ifltarget.tag
    - match: '\\[^\s'']*'
      scope: ifltarget.string.escape
    - match: '"'
      scope: ifltarget.string
      pop: true

  comments:
    - match: '/\*'
      scope: ifltarget.comment
      push:
        - meta_scope: ifltarget.comment
        - match: '((TODO[:]?))'
          captures:
            1: markup.heading
            2: ifltarget.comment.todo
        - match: '((BUG[:]?))'
          captures:
            1: markup.heading
            2: ifltarget.comment.bug
        - match: '((NOTE[:]?))'
          captures:
            1: markup.heading
            2: ifltarget.comment.note
        - match: '\*/'
          pop: true

  default:
    - match: '\b[a-zA-Z_][a-zA-Z_0-9]*\b'
      scope: ifltarget.default
