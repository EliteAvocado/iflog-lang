%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: ifl
file_extensions:
  - ifl
scope: source.ifl

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: functions
    - include: access
    - include: keywords
    - include: types
    - include: symbols
    - include: strings
    - include: numbers
    - include: default

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: ifltarget.default.none

  access:
    - match: '([a-zA-Z_][a-zA-Z_0-9]*)(::)([a-zA-Z_][a-zA-Z_0-9]*)'
      scope: ifltarget.comment
      captures:
          1: ifltarget.default
          2: ifltarget.symbol
          3: ifltarget.default

  types:
    - match: '\b(date|auto|int|float|bool|string|char|trigger|void)\b'
      scope: iflog.keyword.types
    - match: '\b(str([0-9]+)|date([0-9]+)|float([0-9]+)|char([0-9]+))\b'
      scope: iflog.keyword.types

  functions:
    - match: '(old|new)(\()'
      captures:
        1 : ifltarget.keyword2
        # 1: ifltarget.default
        # 1: iflog.keyword.function
        2: ifltarget.default
    - match: '(ret|ins|upd|del|print|printwarn|printerr|coalesce|between|multi)(\()'
      captures:
        1: iflog.keyword.function
        2: ifltarget.default

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(def)\b'
      scope: ifltarget.keyword.block
    - match: '\b(pk|uks|data|global|before|after)\b'
      scope: ifltarget.keyword
    - match: '\b(in|as)\b'
      scope: ifltarget.keyword2
    - match: '\b(noaction)\b'
      scope: iflog.symbol.derivesel
      # scope: iflog.keyword.constant
    - match: '\b(always)\b'
      scope: iflog.symbol.deriveif
    - match: '\b(null|new|old|nl|tr|true|false|now)\b'
      scope: iflog.keyword.constant
    - match: '_|\.\.'
      scope: iflog.keyword.constant

  symbols:
    - match: ':-'
      scope: iflog.symbol.derivesel
    - match: '<-|->|!'
      scope: iflog.symbol.deriveif
    - match: '\+|-|/|%|\*|=|!|<|>|\[|\]|;'
      scope: ifltarget.symbol
    - match: '{|}|\(|\)'
      scope: ifltarget.default
    - match: ',|\||:'
      scope: iflog.symbol.grey

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: ifltarget.string
      push: inside_string_double
    - match: "'"
      scope: ifltarget.string
      push: inside_string_single

  inside_string_double:
    - meta_include_prototype: false
    - meta_scope: ifltarget.string
    - match: '\\[^\s'']*'
      scope: ifltarget.string.escape
    - match: '"'
      scope: ifltarget.string
      pop: true

  inside_string_single:
    - meta_include_prototype: false
    - meta_scope: ifltarget.string
    - match: '\\[^\s'']*'
      scope: ifltarget.string.escape
    - match: "'"
      scope: ifltarget.string
      pop: true

  comments:
    - match: '//[^\*]'
      scope: ifltarget.comment
      push: inside_line_comment
    - match: '/\*'
      scope: ifltarget.comment
      push: inside_block_comment

  inside_line_comment:
    - meta_scope: ifltarget.comment
    - match: '((TODO[:]?))'
      captures:
        1: markup.heading
        2: ifltarget.comment.todo
    - match: '((BUG[:]?))'
      captures:
        1: markup.heading
        2: ifltarget.comment.bug
    - match: '((NOTE[:]?))'
      captures:
        1: markup.heading
        2: ifltarget.comment.note
    - match: $\n?
      pop: true

  inside_block_comment:
    - meta_scope: ifltarget.comment
    - match: '((TODO[:]?))'
      captures:
        1: markup.heading
        2: ifltarget.comment.todo
    - match: '((BUG[:]?))'
      captures:
        1: markup.heading
        2: ifltarget.comment.bug
    - match: '((NOTE[:]?))'
      captures:
        1: markup.heading
        2: ifltarget.comment.note
    - match: '\*/'
      pop: true

  default:
    - match: '\b[a-zA-Z_][a-zA-Z_0-9]*\b'
      scope: ifltarget.default
